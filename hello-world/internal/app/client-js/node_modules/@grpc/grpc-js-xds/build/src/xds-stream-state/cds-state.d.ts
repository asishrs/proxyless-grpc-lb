import { StatusObject } from "@grpc/grpc-js";
import { Cluster__Output } from "../generated/envoy/api/v2/Cluster";
import { EdsState } from "./eds-state";
import { Watcher, XdsStreamState } from "./xds-stream-state";
export declare class CdsState implements XdsStreamState<Cluster__Output> {
    private edsState;
    private updateResourceNames;
    versionInfo: string;
    nonce: string;
    private watchers;
    private latestResponses;
    constructor(edsState: EdsState, updateResourceNames: () => void);
    /**
     * Add the watcher to the watcher list. Returns true if the list of resource
     * names has changed, and false otherwise.
     * @param clusterName
     * @param watcher
     */
    addWatcher(clusterName: string, watcher: Watcher<Cluster__Output>): void;
    removeWatcher(clusterName: string, watcher: Watcher<Cluster__Output>): void;
    getResourceNames(): string[];
    private validateResponse;
    /**
     * Given a list of clusterNames (which may actually be the cluster name),
     * for each watcher watching a name not on the list, call that watcher's
     * onResourceDoesNotExist method.
     * @param allClusterNames
     */
    private handleMissingNames;
    handleResponses(responses: Cluster__Output[]): string | null;
    reportStreamError(status: StatusObject): void;
}
