"use strict";
// Original file: deps/envoy-api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ServerHeaderTransformation = exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_Tracing_OperationName = exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails = exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_CodecType = void 0;
// Original file: deps/envoy-api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
var _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_CodecType;
(function (_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_CodecType) {
    /**
     * For every new connection, the connection manager will determine which
     * codec to use. This mode supports both ALPN for TLS listeners as well as
     * protocol inference for plaintext listeners. If ALPN data is available, it
     * is preferred, otherwise protocol inference is used. In almost all cases,
     * this is the right option to choose for this setting.
     */
    _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_CodecType[_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_CodecType["AUTO"] = 0] = "AUTO";
    /**
     * The connection manager will assume that the client is speaking HTTP/1.1.
     */
    _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_CodecType[_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_CodecType["HTTP1"] = 1] = "HTTP1";
    /**
     * The connection manager will assume that the client is speaking HTTP/2
     * (Envoy does not require HTTP/2 to take place over TLS or to use ALPN.
     * Prior knowledge is allowed).
     */
    _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_CodecType[_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_CodecType["HTTP2"] = 2] = "HTTP2";
    /**
     * [#not-implemented-hide:] QUIC implementation is not production ready yet. Use this enum with
     * caution to prevent accidental execution of QUIC code. I.e. `!= HTTP2` is no longer sufficient
     * to distinguish HTTP1 and HTTP2 traffic.
     */
    _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_CodecType[_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_CodecType["HTTP3"] = 3] = "HTTP3";
})(_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_CodecType = exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_CodecType || (exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_CodecType = {}));
// Original file: deps/envoy-api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
/**
 * How to handle the :ref:`config_http_conn_man_headers_x-forwarded-client-cert` (XFCC) HTTP
 * header.
 */
var _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails;
(function (_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails) {
    /**
     * Do not send the XFCC header to the next hop. This is the default value.
     */
    _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails[_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails["SANITIZE"] = 0] = "SANITIZE";
    /**
     * When the client connection is mTLS (Mutual TLS), forward the XFCC header
     * in the request.
     */
    _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails[_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails["FORWARD_ONLY"] = 1] = "FORWARD_ONLY";
    /**
     * When the client connection is mTLS, append the client certificate
     * information to the requestâ€™s XFCC header and forward it.
     */
    _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails[_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails["APPEND_FORWARD"] = 2] = "APPEND_FORWARD";
    /**
     * When the client connection is mTLS, reset the XFCC header with the client
     * certificate information and send it to the next hop.
     */
    _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails[_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails["SANITIZE_SET"] = 3] = "SANITIZE_SET";
    /**
     * Always forward the XFCC header in the request, regardless of whether the
     * client connection is mTLS.
     */
    _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails[_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails["ALWAYS_FORWARD_ONLY"] = 4] = "ALWAYS_FORWARD_ONLY";
})(_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails = exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails || (exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails = {}));
// Original file: deps/envoy-api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
var _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_Tracing_OperationName;
(function (_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_Tracing_OperationName) {
    /**
     * The HTTP listener is used for ingress/incoming requests.
     */
    _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_Tracing_OperationName[_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_Tracing_OperationName["INGRESS"] = 0] = "INGRESS";
    /**
     * The HTTP listener is used for egress/outgoing requests.
     */
    _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_Tracing_OperationName[_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_Tracing_OperationName["EGRESS"] = 1] = "EGRESS";
})(_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_Tracing_OperationName = exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_Tracing_OperationName || (exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_Tracing_OperationName = {}));
// Original file: deps/envoy-api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
var _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ServerHeaderTransformation;
(function (_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ServerHeaderTransformation) {
    /**
     * Overwrite any Server header with the contents of server_name.
     */
    _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ServerHeaderTransformation[_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ServerHeaderTransformation["OVERWRITE"] = 0] = "OVERWRITE";
    /**
     * If no Server header is present, append Server server_name
     * If a Server header is present, pass it through.
     */
    _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ServerHeaderTransformation[_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ServerHeaderTransformation["APPEND_IF_ABSENT"] = 1] = "APPEND_IF_ABSENT";
    /**
     * Pass through the value of the server header, and do not append a header
     * if none is present.
     */
    _envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ServerHeaderTransformation[_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ServerHeaderTransformation["PASS_THROUGH"] = 2] = "PASS_THROUGH";
})(_envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ServerHeaderTransformation = exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ServerHeaderTransformation || (exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ServerHeaderTransformation = {}));
//# sourceMappingURL=HttpConnectionManager.js.map