import { StatusObject } from "@grpc/grpc-js";
import { ClusterLoadAssignment__Output } from "../generated/envoy/api/v2/ClusterLoadAssignment";
import { Watcher, XdsStreamState } from "./xds-stream-state";
export declare class EdsState implements XdsStreamState<ClusterLoadAssignment__Output> {
    private updateResourceNames;
    versionInfo: string;
    nonce: string;
    private watchers;
    private latestResponses;
    constructor(updateResourceNames: () => void);
    /**
     * Add the watcher to the watcher list. Returns true if the list of resource
     * names has changed, and false otherwise.
     * @param edsServiceName
     * @param watcher
     */
    addWatcher(edsServiceName: string, watcher: Watcher<ClusterLoadAssignment__Output>): void;
    removeWatcher(edsServiceName: string, watcher: Watcher<ClusterLoadAssignment__Output>): void;
    getResourceNames(): string[];
    /**
     * Validate the ClusterLoadAssignment object by these rules:
     * https://github.com/grpc/proposal/blob/master/A27-xds-global-load-balancing.md#clusterloadassignment-proto
     * @param message
     */
    private validateResponse;
    /**
     * Given a list of edsServiceNames (which may actually be the cluster name),
     * for each watcher watching a name not on the list, call that watcher's
     * onResourceDoesNotExist method.
     * @param allClusterNames
     */
    handleMissingNames(allEdsServiceNames: Set<string>): void;
    handleResponses(responses: ClusterLoadAssignment__Output[]): "EDS Error: ClusterLoadAssignment validation failed" | null;
    reportStreamError(status: StatusObject): void;
}
