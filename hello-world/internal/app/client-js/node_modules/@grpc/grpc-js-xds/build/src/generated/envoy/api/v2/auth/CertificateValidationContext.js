"use strict";
// Original file: deps/envoy-api/envoy/api/v2/auth/common.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports._envoy_api_v2_auth_CertificateValidationContext_TrustChainVerification = void 0;
// Original file: deps/envoy-api/envoy/api/v2/auth/common.proto
/**
 * Peer certificate verification mode.
 */
var _envoy_api_v2_auth_CertificateValidationContext_TrustChainVerification;
(function (_envoy_api_v2_auth_CertificateValidationContext_TrustChainVerification) {
    /**
     * Perform default certificate verification (e.g., against CA / verification lists)
     */
    _envoy_api_v2_auth_CertificateValidationContext_TrustChainVerification[_envoy_api_v2_auth_CertificateValidationContext_TrustChainVerification["VERIFY_TRUST_CHAIN"] = 0] = "VERIFY_TRUST_CHAIN";
    /**
     * Connections where the certificate fails verification will be permitted.
     * For HTTP connections, the result of certificate verification can be used in route matching. (
     * see :ref:`validated <envoy_api_field_route.RouteMatch.TlsContextMatchOptions.validated>` ).
     */
    _envoy_api_v2_auth_CertificateValidationContext_TrustChainVerification[_envoy_api_v2_auth_CertificateValidationContext_TrustChainVerification["ACCEPT_UNTRUSTED"] = 1] = "ACCEPT_UNTRUSTED";
})(_envoy_api_v2_auth_CertificateValidationContext_TrustChainVerification = exports._envoy_api_v2_auth_CertificateValidationContext_TrustChainVerification || (exports._envoy_api_v2_auth_CertificateValidationContext_TrustChainVerification = {}));
//# sourceMappingURL=CertificateValidationContext.js.map