"use strict";
/*
 * Copyright 2021 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdsState = void 0;
const grpc_js_1 = require("@grpc/grpc-js");
const TRACER_NAME = 'xds_client';
function trace(text) {
    grpc_js_1.experimental.trace(grpc_js_1.logVerbosity.DEBUG, TRACER_NAME, text);
}
class CdsState {
    constructor(edsState, updateResourceNames) {
        this.edsState = edsState;
        this.updateResourceNames = updateResourceNames;
        this.versionInfo = '';
        this.nonce = '';
        this.watchers = new Map();
        this.latestResponses = [];
    }
    /**
     * Add the watcher to the watcher list. Returns true if the list of resource
     * names has changed, and false otherwise.
     * @param clusterName
     * @param watcher
     */
    addWatcher(clusterName, watcher) {
        trace('Adding CDS watcher for clusterName ' + clusterName);
        let watchersEntry = this.watchers.get(clusterName);
        let addedServiceName = false;
        if (watchersEntry === undefined) {
            addedServiceName = true;
            watchersEntry = [];
            this.watchers.set(clusterName, watchersEntry);
        }
        watchersEntry.push(watcher);
        /* If we have already received an update for the requested edsServiceName,
         * immediately pass that update along to the watcher */
        for (const message of this.latestResponses) {
            if (message.name === clusterName) {
                /* These updates normally occur asynchronously, so we ensure that
                 * the same happens here */
                process.nextTick(() => {
                    trace('Reporting existing CDS update for new watcher for clusterName ' + clusterName);
                    watcher.onValidUpdate(message);
                });
            }
        }
        if (addedServiceName) {
            this.updateResourceNames();
        }
    }
    removeWatcher(clusterName, watcher) {
        trace('Removing CDS watcher for clusterName ' + clusterName);
        const watchersEntry = this.watchers.get(clusterName);
        let removedServiceName = false;
        if (watchersEntry !== undefined) {
            const entryIndex = watchersEntry.indexOf(watcher);
            if (entryIndex >= 0) {
                watchersEntry.splice(entryIndex, 1);
            }
            if (watchersEntry.length === 0) {
                removedServiceName = true;
                this.watchers.delete(clusterName);
            }
        }
        if (removedServiceName) {
            this.updateResourceNames();
        }
    }
    getResourceNames() {
        return Array.from(this.watchers.keys());
    }
    validateResponse(message) {
        var _a, _b;
        if (message.type !== 'EDS') {
            return false;
        }
        if (!((_b = (_a = message.eds_cluster_config) === null || _a === void 0 ? void 0 : _a.eds_config) === null || _b === void 0 ? void 0 : _b.ads)) {
            return false;
        }
        if (message.lb_policy !== 'ROUND_ROBIN') {
            return false;
        }
        if (message.lrs_server) {
            if (!message.lrs_server.self) {
                return false;
            }
        }
        return true;
    }
    /**
     * Given a list of clusterNames (which may actually be the cluster name),
     * for each watcher watching a name not on the list, call that watcher's
     * onResourceDoesNotExist method.
     * @param allClusterNames
     */
    handleMissingNames(allClusterNames) {
        for (const [clusterName, watcherList] of this.watchers.entries()) {
            if (!allClusterNames.has(clusterName)) {
                trace('Reporting CDS resource does not exist for clusterName ' + clusterName);
                for (const watcher of watcherList) {
                    watcher.onResourceDoesNotExist();
                }
            }
        }
    }
    handleResponses(responses) {
        var _a, _b, _c;
        for (const message of responses) {
            if (!this.validateResponse(message)) {
                trace('CDS validation failed for message ' + JSON.stringify(message));
                return 'CDS Error: Cluster validation failed';
            }
        }
        this.latestResponses = responses;
        const allEdsServiceNames = new Set();
        const allClusterNames = new Set();
        for (const message of responses) {
            allClusterNames.add(message.name);
            const edsServiceName = (_b = (_a = message.eds_cluster_config) === null || _a === void 0 ? void 0 : _a.service_name) !== null && _b !== void 0 ? _b : '';
            allEdsServiceNames.add(edsServiceName === '' ? message.name : edsServiceName);
            const watchers = (_c = this.watchers.get(message.name)) !== null && _c !== void 0 ? _c : [];
            for (const watcher of watchers) {
                watcher.onValidUpdate(message);
            }
        }
        trace('Received CDS updates for cluster names ' + Array.from(allClusterNames));
        this.handleMissingNames(allClusterNames);
        this.edsState.handleMissingNames(allEdsServiceNames);
        return null;
    }
    reportStreamError(status) {
        for (const watcherList of this.watchers.values()) {
            for (const watcher of watcherList) {
                watcher.onTransientError(status);
            }
        }
    }
}
exports.CdsState = CdsState;
//# sourceMappingURL=cds-state.js.map