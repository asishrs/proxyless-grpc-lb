"use strict";
/*
 * Copyright 2021 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeSingleResource = exports.HTTP_CONNECTION_MANGER_TYPE_URL_V3 = exports.HTTP_CONNECTION_MANGER_TYPE_URL_V2 = exports.RDS_TYPE_URL_V3 = exports.LDS_TYPE_URL_V3 = exports.CDS_TYPE_URL_V3 = exports.EDS_TYPE_URL_V3 = exports.RDS_TYPE_URL_V2 = exports.LDS_TYPE_URL_V2 = exports.CDS_TYPE_URL_V2 = exports.EDS_TYPE_URL_V2 = void 0;
// This is a non-public, unstable API, but it's very convenient
const util_1 = require("@grpc/proto-loader/build/src/util");
exports.EDS_TYPE_URL_V2 = 'type.googleapis.com/envoy.api.v2.ClusterLoadAssignment';
exports.CDS_TYPE_URL_V2 = 'type.googleapis.com/envoy.api.v2.Cluster';
exports.LDS_TYPE_URL_V2 = 'type.googleapis.com/envoy.api.v2.Listener';
exports.RDS_TYPE_URL_V2 = 'type.googleapis.com/envoy.api.v2.RouteConfiguration';
exports.EDS_TYPE_URL_V3 = 'type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment';
exports.CDS_TYPE_URL_V3 = 'type.googleapis.com/envoy.config.cluster.v3.Cluster';
exports.LDS_TYPE_URL_V3 = 'type.googleapis.com/envoy.config.listener.v3.Listener';
exports.RDS_TYPE_URL_V3 = 'type.googleapis.com/envoy.config.route.v3.RouteConfiguration';
exports.HTTP_CONNECTION_MANGER_TYPE_URL_V2 = 'type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager';
exports.HTTP_CONNECTION_MANGER_TYPE_URL_V3 = 'type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager';
const resourceRoot = util_1.loadProtosWithOptionsSync([
    'envoy/config/listener/v3/listener.proto',
    'envoy/config/route/v3/route.proto',
    'envoy/config/cluster/v3/cluster.proto',
    'envoy/config/endpoint/v3/endpoint.proto',
    'envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto'
], {
    keepCase: true,
    includeDirs: [
        // Paths are relative to src/build
        __dirname + '/../../deps/envoy-api/',
        __dirname + '/../../deps/udpa/',
        __dirname + '/../../deps/googleapis/',
        __dirname + '/../../deps/protoc-gen-validate/',
    ],
});
const toObjectOptions = {
    longs: String,
    enums: String,
    defaults: true,
    oneofs: true
};
function decodeSingleResource(targetTypeUrl, message) {
    const name = targetTypeUrl.substring(targetTypeUrl.lastIndexOf('/') + 1);
    const type = resourceRoot.lookup(name);
    if (type) {
        return type.decode(message).toObject(toObjectOptions);
    }
    else {
        throw new Error(`ADS Error: unknown resource type ${targetTypeUrl}`);
    }
}
exports.decodeSingleResource = decodeSingleResource;
//# sourceMappingURL=resources.js.map