import { experimental } from '@grpc/grpc-js';
import { Locality__Output } from './generated/envoy/api/v2/core/Locality';
import LoadBalancer = experimental.LoadBalancer;
import ChannelControlHelper = experimental.ChannelControlHelper;
import SubchannelAddress = experimental.SubchannelAddress;
import LoadBalancingConfig = experimental.LoadBalancingConfig;
export declare class LrsLoadBalancingConfig implements LoadBalancingConfig {
    private clusterName;
    private edsServiceName;
    private lrsLoadReportingServerName;
    private locality;
    private childPolicy;
    getLoadBalancerName(): string;
    toJsonObject(): object;
    constructor(clusterName: string, edsServiceName: string, lrsLoadReportingServerName: string, locality: Locality__Output, childPolicy: LoadBalancingConfig[]);
    getClusterName(): string;
    getEdsServiceName(): string;
    getLrsLoadReportingServerName(): string;
    getLocality(): Locality__Output;
    getChildPolicy(): experimental.LoadBalancingConfig[];
    static createFromJson(obj: any): LrsLoadBalancingConfig;
}
/**
 * "Load balancer" that delegates the actual load balancing logic to another
 * LoadBalancer class and adds hooks to track when calls started using that
 * LoadBalancer start and end, and uses the XdsClient to report that
 * information back to the xDS server.
 */
export declare class LrsLoadBalancer implements LoadBalancer {
    private channelControlHelper;
    private childBalancer;
    private localityStatsReporter;
    constructor(channelControlHelper: ChannelControlHelper);
    updateAddressList(addressList: SubchannelAddress[], lbConfig: LoadBalancingConfig, attributes: {
        [key: string]: unknown;
    }): void;
    exitIdle(): void;
    resetBackoff(): void;
    destroy(): void;
    getTypeName(): string;
}
export declare function setup(): void;
