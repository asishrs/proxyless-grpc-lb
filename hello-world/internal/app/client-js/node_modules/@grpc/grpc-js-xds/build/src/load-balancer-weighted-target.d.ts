import { experimental } from "@grpc/grpc-js";
import LoadBalancingConfig = experimental.LoadBalancingConfig;
import LoadBalancer = experimental.LoadBalancer;
import ChannelControlHelper = experimental.ChannelControlHelper;
import SubchannelAddress = experimental.SubchannelAddress;
export interface WeightedTarget {
    weight: number;
    child_policy: LoadBalancingConfig[];
}
export declare class WeightedTargetLoadBalancingConfig implements LoadBalancingConfig {
    private targets;
    getLoadBalancerName(): string;
    constructor(targets: Map<string, WeightedTarget>);
    getTargets(): Map<string, WeightedTarget>;
    toJsonObject(): object;
    static createFromJson(obj: any): WeightedTargetLoadBalancingConfig;
}
export declare class WeightedTargetLoadBalancer implements LoadBalancer {
    private channelControlHelper;
    private WeightedChildImpl;
    /**
     * Map of target names to target children. Includes current targets and
     * previous targets with deactivation timers that have not yet triggered.
     */
    private targets;
    /**
     * List of current target names.
     */
    private targetList;
    constructor(channelControlHelper: ChannelControlHelper);
    private updateState;
    updateAddressList(addressList: SubchannelAddress[], lbConfig: LoadBalancingConfig, attributes: {
        [key: string]: unknown;
    }): void;
    exitIdle(): void;
    resetBackoff(): void;
    destroy(): void;
    getTypeName(): string;
}
export declare function setup(): void;
